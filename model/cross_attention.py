import tensorflow as tf
import keras
from utils.shape_checker import ShapeChecker

#Attention tells the decoder which of the values in the vector generated by the encoder to look at
#The decoder will generate the first English word and then want to decide what word should come next
#So for the sentence "I went to the library", it will generate "I" and then want to know what's next
#The attention layer will tell it which word in the foreign sentence is most likely to mean "went"
#This allows the decoder to create an English sentence in English order, instead of just looping through the vector
#Because just looping through the vector would create a disjointed English sentence in the order of the foreign language
class CrossAttention(keras.layers.Layer):
    
    def __init__(self, units, **kwargs):
        super().__init__()
        #Multiheaded attention gives multiple interpretations based on the concept around it
        self.mha = keras.layers.MultiHeadAttention(key_dim=units, num_heads=4, **kwargs)
        #Used to make values created by attention layer more understandable and stable (within the range of 1 rather than a super large range of numbers)
        self.layernorm = keras.layers.LayerNormalization()
        #Adds attention value to the vector value
        self.add = keras.layers.Add()

    #Called by super __call__ dunder method
    def call(self, x, context):
        shape_checker = ShapeChecker()

        shape_checker(x, "batch t units")
        shape_checker(context, "batch s units")

        attn_output, attn_scores = self.mha(
            query=x,
            value=context,
            return_attention_scores=True
        )

        shape_checker(x, "batch t units")
        shape_checker(attn_scores, "batch heads t s")

        #Cache the attention scores for plotting later
        attn_scores = tf.reduce_mean(attn_scores, axis=1)
        shape_checker(attn_scores, "batch t s")
        self.last_attention_weights = attn_scores

        x = self.add([x, attn_output])
        x = self.layernorm(x)

        return x

